{
  "version": 3,
  "sources": ["../../workbox-cacheable-response/_version.js", "../../workbox-cacheable-response/CacheableResponse.js", "../../workbox-cacheable-response/CacheableResponsePlugin.js"],
  "sourcesContent": ["\"use strict\";\r\n// @ts-ignore\r\ntry {\r\n    self['workbox:cacheable-response:7.0.0'] && _();\r\n}\r\ncatch (e) { }\r\n", "/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport './_version.js';\r\n/**\r\n * This class allows you to set up rules determining what\r\n * status codes and/or headers need to be present in order for a\r\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\r\n * to be considered cacheable.\r\n *\r\n * @memberof workbox-cacheable-response\r\n */\r\nclass CacheableResponse {\r\n    /**\r\n     * To construct a new CacheableResponse instance you must provide at least\r\n     * one of the `config` properties.\r\n     *\r\n     * If both `statuses` and `headers` are specified, then both conditions must\r\n     * be met for the `Response` to be considered cacheable.\r\n     *\r\n     * @param {Object} config\r\n     * @param {Array<number>} [config.statuses] One or more status codes that a\r\n     * `Response` can have and be considered cacheable.\r\n     * @param {Object<string,string>} [config.headers] A mapping of header names\r\n     * and expected values that a `Response` can have and be considered cacheable.\r\n     * If multiple headers are provided, only one needs to be present.\r\n     */\r\n    constructor(config = {}) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!(config.statuses || config.headers)) {\r\n                throw new WorkboxError('statuses-or-headers-required', {\r\n                    moduleName: 'workbox-cacheable-response',\r\n                    className: 'CacheableResponse',\r\n                    funcName: 'constructor',\r\n                });\r\n            }\r\n            if (config.statuses) {\r\n                assert.isArray(config.statuses, {\r\n                    moduleName: 'workbox-cacheable-response',\r\n                    className: 'CacheableResponse',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.statuses',\r\n                });\r\n            }\r\n            if (config.headers) {\r\n                assert.isType(config.headers, 'object', {\r\n                    moduleName: 'workbox-cacheable-response',\r\n                    className: 'CacheableResponse',\r\n                    funcName: 'constructor',\r\n                    paramName: 'config.headers',\r\n                });\r\n            }\r\n        }\r\n        this._statuses = config.statuses;\r\n        this._headers = config.headers;\r\n    }\r\n    /**\r\n     * Checks a response to see whether it's cacheable or not, based on this\r\n     * object's configuration.\r\n     *\r\n     * @param {Response} response The response whose cacheability is being\r\n     * checked.\r\n     * @return {boolean} `true` if the `Response` is cacheable, and `false`\r\n     * otherwise.\r\n     */\r\n    isResponseCacheable(response) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(response, Response, {\r\n                moduleName: 'workbox-cacheable-response',\r\n                className: 'CacheableResponse',\r\n                funcName: 'isResponseCacheable',\r\n                paramName: 'response',\r\n            });\r\n        }\r\n        let cacheable = true;\r\n        if (this._statuses) {\r\n            cacheable = this._statuses.includes(response.status);\r\n        }\r\n        if (this._headers && cacheable) {\r\n            cacheable = Object.keys(this._headers).some((headerName) => {\r\n                return response.headers.get(headerName) === this._headers[headerName];\r\n            });\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            if (!cacheable) {\r\n                logger.groupCollapsed(`The request for ` +\r\n                    `'${getFriendlyURL(response.url)}' returned a response that does ` +\r\n                    `not meet the criteria for being cached.`);\r\n                logger.groupCollapsed(`View cacheability criteria here.`);\r\n                logger.log(`Cacheable statuses: ` + JSON.stringify(this._statuses));\r\n                logger.log(`Cacheable headers: ` + JSON.stringify(this._headers, null, 2));\r\n                logger.groupEnd();\r\n                const logFriendlyHeaders = {};\r\n                response.headers.forEach((value, key) => {\r\n                    logFriendlyHeaders[key] = value;\r\n                });\r\n                logger.groupCollapsed(`View response status and headers here.`);\r\n                logger.log(`Response status: ${response.status}`);\r\n                logger.log(`Response headers: ` + JSON.stringify(logFriendlyHeaders, null, 2));\r\n                logger.groupEnd();\r\n                logger.groupCollapsed(`View full response details here.`);\r\n                logger.log(response.headers);\r\n                logger.log(response);\r\n                logger.groupEnd();\r\n                logger.groupEnd();\r\n            }\r\n        }\r\n        return cacheable;\r\n    }\r\n}\r\nexport { CacheableResponse };\r\n", "/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { CacheableResponse, } from './CacheableResponse.js';\r\nimport './_version.js';\r\n/**\r\n * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\r\n * easier to add in cacheability checks to requests made via Workbox's built-in\r\n * strategies.\r\n *\r\n * @memberof workbox-cacheable-response\r\n */\r\nclass CacheableResponsePlugin {\r\n    /**\r\n     * To construct a new CacheableResponsePlugin instance you must provide at\r\n     * least one of the `config` properties.\r\n     *\r\n     * If both `statuses` and `headers` are specified, then both conditions must\r\n     * be met for the `Response` to be considered cacheable.\r\n     *\r\n     * @param {Object} config\r\n     * @param {Array<number>} [config.statuses] One or more status codes that a\r\n     * `Response` can have and be considered cacheable.\r\n     * @param {Object<string,string>} [config.headers] A mapping of header names\r\n     * and expected values that a `Response` can have and be considered cacheable.\r\n     * If multiple headers are provided, only one needs to be present.\r\n     */\r\n    constructor(config) {\r\n        /**\r\n         * @param {Object} options\r\n         * @param {Response} options.response\r\n         * @return {Response|null}\r\n         * @private\r\n         */\r\n        this.cacheWillUpdate = async ({ response }) => {\r\n            if (this._cacheableResponse.isResponseCacheable(response)) {\r\n                return response;\r\n            }\r\n            return null;\r\n        };\r\n        this._cacheableResponse = new CacheableResponse(config);\r\n    }\r\n}\r\nexport { CacheableResponsePlugin };\r\n"],
  "mappings": "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",
  "names": []
}
