{
  "version": 3,
  "sources": ["../../workbox-cacheable-response/_version.js", "../../workbox-cacheable-response/CacheableResponse.js", "../../workbox-cacheable-response/CacheableResponsePlugin.js"],
  "sourcesContent": ["\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:cacheable-response:7.0.0'] && _();\n}\ncatch (e) { }\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport './_version.js';\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof workbox-cacheable-response\n */\nclass CacheableResponse {\n    /**\n     * To construct a new CacheableResponse instance you must provide at least\n     * one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.statuses || config.headers)) {\n                throw new WorkboxError('statuses-or-headers-required', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.statuses) {\n                assert.isArray(config.statuses, {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.statuses',\n                });\n            }\n            if (config.headers) {\n                assert.isType(config.headers, 'object', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.headers',\n                });\n            }\n        }\n        this._statuses = config.statuses;\n        this._headers = config.headers;\n    }\n    /**\n     * Checks a response to see whether it's cacheable or not, based on this\n     * object's configuration.\n     *\n     * @param {Response} response The response whose cacheability is being\n     * checked.\n     * @return {boolean} `true` if the `Response` is cacheable, and `false`\n     * otherwise.\n     */\n    isResponseCacheable(response) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(response, Response, {\n                moduleName: 'workbox-cacheable-response',\n                className: 'CacheableResponse',\n                funcName: 'isResponseCacheable',\n                paramName: 'response',\n            });\n        }\n        let cacheable = true;\n        if (this._statuses) {\n            cacheable = this._statuses.includes(response.status);\n        }\n        if (this._headers && cacheable) {\n            cacheable = Object.keys(this._headers).some((headerName) => {\n                return response.headers.get(headerName) === this._headers[headerName];\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (!cacheable) {\n                logger.groupCollapsed(`The request for ` +\n                    `'${getFriendlyURL(response.url)}' returned a response that does ` +\n                    `not meet the criteria for being cached.`);\n                logger.groupCollapsed(`View cacheability criteria here.`);\n                logger.log(`Cacheable statuses: ` + JSON.stringify(this._statuses));\n                logger.log(`Cacheable headers: ` + JSON.stringify(this._headers, null, 2));\n                logger.groupEnd();\n                const logFriendlyHeaders = {};\n                response.headers.forEach((value, key) => {\n                    logFriendlyHeaders[key] = value;\n                });\n                logger.groupCollapsed(`View response status and headers here.`);\n                logger.log(`Response status: ${response.status}`);\n                logger.log(`Response headers: ` + JSON.stringify(logFriendlyHeaders, null, 2));\n                logger.groupEnd();\n                logger.groupCollapsed(`View full response details here.`);\n                logger.log(response.headers);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n            }\n        }\n        return cacheable;\n    }\n}\nexport { CacheableResponse };\n", "/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheableResponse, } from './CacheableResponse.js';\nimport './_version.js';\n/**\n * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\n * easier to add in cacheability checks to requests made via Workbox's built-in\n * strategies.\n *\n * @memberof workbox-cacheable-response\n */\nclass CacheableResponsePlugin {\n    /**\n     * To construct a new CacheableResponsePlugin instance you must provide at\n     * least one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config) {\n        /**\n         * @param {Object} options\n         * @param {Response} options.response\n         * @return {Response|null}\n         * @private\n         */\n        this.cacheWillUpdate = async ({ response }) => {\n            if (this._cacheableResponse.isResponseCacheable(response)) {\n                return response;\n            }\n            return null;\n        };\n        this._cacheableResponse = new CacheableResponse(config);\n    }\n}\nexport { CacheableResponsePlugin };\n"],
  "mappings": "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",
  "names": []
}
