{
  "version": 3,
  "sources": ["../../workbox-strategies/CacheOnly.js", "../../workbox-strategies/NetworkOnly.js"],
  "sourcesContent": ["/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { Strategy } from './Strategy.js';\r\nimport { messages } from './utils/messages.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of a [cache-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-only)\r\n * request strategy.\r\n *\r\n * This class is useful if you want to take advantage of any\r\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\r\n *\r\n * If there is no cache match, this will throw a `WorkboxError` exception.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-strategies\r\n */\r\nclass CacheOnly extends Strategy {\r\n    /**\r\n     * @private\r\n     * @param {Request|string} request A request to run this strategy for.\r\n     * @param {workbox-strategies.StrategyHandler} handler The event that\r\n     *     triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async _handle(request, handler) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-strategies',\r\n                className: this.constructor.name,\r\n                funcName: 'makeRequest',\r\n                paramName: 'request',\r\n            });\r\n        }\r\n        const response = await handler.cacheMatch(request);\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\r\n            if (response) {\r\n                logger.log(`Found a cached response in the '${this.cacheName}' ` + `cache.`);\r\n                messages.printFinalResponse(response);\r\n            }\r\n            else {\r\n                logger.log(`No response found in the '${this.cacheName}' cache.`);\r\n            }\r\n            logger.groupEnd();\r\n        }\r\n        if (!response) {\r\n            throw new WorkboxError('no-response', { url: request.url });\r\n        }\r\n        return response;\r\n    }\r\n}\r\nexport { CacheOnly };\r\n", "/*\r\n  Copyright 2018 Google LLC\r\n\r\n  Use of this source code is governed by an MIT-style\r\n  license that can be found in the LICENSE file or at\r\n  https://opensource.org/licenses/MIT.\r\n*/\r\nimport { assert } from 'workbox-core/_private/assert.js';\r\nimport { logger } from 'workbox-core/_private/logger.js';\r\nimport { timeout } from 'workbox-core/_private/timeout.js';\r\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\r\nimport { Strategy } from './Strategy.js';\r\nimport { messages } from './utils/messages.js';\r\nimport './_version.js';\r\n/**\r\n * An implementation of a\r\n * [network-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)\r\n * request strategy.\r\n *\r\n * This class is useful if you want to take advantage of any\r\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\r\n *\r\n * If the network request fails, this will throw a `WorkboxError` exception.\r\n *\r\n * @extends workbox-strategies.Strategy\r\n * @memberof workbox-strategies\r\n */\r\nclass NetworkOnly extends Strategy {\r\n    /**\r\n     * @param {Object} [options]\r\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\r\n     * to use in conjunction with this caching strategy.\r\n     * @param {Object} [options.fetchOptions] Values passed along to the\r\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\r\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\r\n     * `fetch()` requests made by this strategy.\r\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\r\n     * that fail to respond within the timeout will result in a network error.\r\n     */\r\n    constructor(options = {}) {\r\n        super(options);\r\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {Request|string} request A request to run this strategy for.\r\n     * @param {workbox-strategies.StrategyHandler} handler The event that\r\n     *     triggered the request.\r\n     * @return {Promise<Response>}\r\n     */\r\n    async _handle(request, handler) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            assert.isInstance(request, Request, {\r\n                moduleName: 'workbox-strategies',\r\n                className: this.constructor.name,\r\n                funcName: '_handle',\r\n                paramName: 'request',\r\n            });\r\n        }\r\n        let error = undefined;\r\n        let response;\r\n        try {\r\n            const promises = [\r\n                handler.fetch(request),\r\n            ];\r\n            if (this._networkTimeoutSeconds) {\r\n                const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\r\n                promises.push(timeoutPromise);\r\n            }\r\n            response = await Promise.race(promises);\r\n            if (!response) {\r\n                throw new Error(`Timed out the network response after ` +\r\n                    `${this._networkTimeoutSeconds} seconds.`);\r\n            }\r\n        }\r\n        catch (err) {\r\n            if (err instanceof Error) {\r\n                error = err;\r\n            }\r\n        }\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\r\n            if (response) {\r\n                logger.log(`Got response from network.`);\r\n            }\r\n            else {\r\n                logger.log(`Unable to get a response from the network.`);\r\n            }\r\n            messages.printFinalResponse(response);\r\n            logger.groupEnd();\r\n        }\r\n        if (!response) {\r\n            throw new WorkboxError('no-response', { url: request.url, error });\r\n        }\r\n        return response;\r\n    }\r\n}\r\nexport { NetworkOnly };\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAyBA,IAAM,YAAN,cAAwB,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ7B,MAAM,QAAQ,SAAS,SAAS;AAC5B,QAAI,MAAuC;AACvC,yBAAO,WAAW,SAAS,SAAS;AAAA,QAChC,YAAY;AAAA,QACZ,WAAW,KAAK,YAAY;AAAA,QAC5B,UAAU;AAAA,QACV,WAAW;AAAA,MACf,CAAC;AAAA,IACL;AACA,UAAM,WAAW,MAAM,QAAQ,WAAW,OAAO;AACjD,QAAI,MAAuC;AACvC,aAAO,eAAe,SAAS,cAAc,KAAK,YAAY,MAAM,OAAO,CAAC;AAC5E,UAAI,UAAU;AACV,eAAO,IAAI,mCAAmC,KAAK,SAAS,UAAe;AAC3E,iBAAS,mBAAmB,QAAQ;AAAA,MACxC,OACK;AACD,eAAO,IAAI,6BAA6B,KAAK,SAAS,UAAU;AAAA,MACpE;AACA,aAAO,SAAS;AAAA,IACpB;AACA,QAAI,CAAC,UAAU;AACX,YAAM,IAAI,aAAa,eAAe,EAAE,KAAK,QAAQ,IAAI,CAAC;AAAA,IAC9D;AACA,WAAO;AAAA,EACX;AACJ;;;AChCA,IAAM,cAAN,cAA0B,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY/B,YAAY,UAAU,CAAC,GAAG;AACtB,UAAM,OAAO;AACb,SAAK,yBAAyB,QAAQ,yBAAyB;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,QAAQ,SAAS,SAAS;AAC5B,QAAI,MAAuC;AACvC,yBAAO,WAAW,SAAS,SAAS;AAAA,QAChC,YAAY;AAAA,QACZ,WAAW,KAAK,YAAY;AAAA,QAC5B,UAAU;AAAA,QACV,WAAW;AAAA,MACf,CAAC;AAAA,IACL;AACA,QAAI,QAAQ;AACZ,QAAI;AACJ,QAAI;AACA,YAAM,WAAW;AAAA,QACb,QAAQ,MAAM,OAAO;AAAA,MACzB;AACA,UAAI,KAAK,wBAAwB;AAC7B,cAAM,iBAAiB,QAAQ,KAAK,yBAAyB,GAAI;AACjE,iBAAS,KAAK,cAAc;AAAA,MAChC;AACA,iBAAW,MAAM,QAAQ,KAAK,QAAQ;AACtC,UAAI,CAAC,UAAU;AACX,cAAM,IAAI,MAAM,wCACT,KAAK,sBAAsB,WAAW;AAAA,MACjD;AAAA,IACJ,SACO,KAAK;AACR,UAAI,eAAe,OAAO;AACtB,gBAAQ;AAAA,MACZ;AAAA,IACJ;AACA,QAAI,MAAuC;AACvC,aAAO,eAAe,SAAS,cAAc,KAAK,YAAY,MAAM,OAAO,CAAC;AAC5E,UAAI,UAAU;AACV,eAAO,IAAI,4BAA4B;AAAA,MAC3C,OACK;AACD,eAAO,IAAI,4CAA4C;AAAA,MAC3D;AACA,eAAS,mBAAmB,QAAQ;AACpC,aAAO,SAAS;AAAA,IACpB;AACA,QAAI,CAAC,UAAU;AACX,YAAM,IAAI,aAAa,eAAe,EAAE,KAAK,QAAQ,KAAK,MAAM,CAAC;AAAA,IACrE;AACA,WAAO;AAAA,EACX;AACJ;",
  "names": []
}
